==============================================================================================================================================
The code at present has been put together by referencing various sources of information
such as:

  AVR446 - Linear speed control of stepper motor Documentation
  Atmel AVR Application Note;
  
  Bresenham type fast algorithm for 3−D linear and helical movement in CNC machines
  Muhammad Saad Saleem Research Assistant ∗K.I.C.S., U.E.T., Lahore saad@khwarzimic.org
  Prof. Dr. Mian Muhammad Saleem Department of Electrical Engineering U.E.T., Lahore drmsaleem@hotmail.com
  March 10, 2004;
  
  XY INTERPOLATION ALGORITHMS [Kenneth and Melvin Goldberg 3913 Pine Street, Apt. F Philadelphia, Pennsylvania 19104]
  
  Improved Algorithm for the Circular Interpolation Time Division 
  Method in CNC System 
  Xudong Yao, Xiuting Zhao 
  Luoyang Institute of Science and Technology, Luoyang, 471023, china 
  cnyxdp@163.com ,  zhaoxiuting211@163.com;
  
  Theory and Design of CNC Systems by Suk-Hwan Suh • Seong-Kyoon Kang Dae-Hyuk Chung • Ian Stroud
  
  GRBL firmware has been referenced as a learning and sample implimentation source;
  
  These references are excellent studies with respect to this CNC project.
 ============================================================================================================================================= 
 
  I have started this project to gain a deeper understanding of the maths and sequences around the control af multi axis
  motion, the project uses a Clicker2 MZ from MikroElectronika which has the pic32mz2048efh100 chip on it.
  
  The chip is clocked at 200mhz and the code impliments all the phrihial colkc modes for the various bus frequencies. my intention
  is to finnish the interpolation Algorythims and movr onto implimenting a floating point library using the chips builtin fp functionality, to quicken the 
  math process. 
  
  It uses my implimentation of a i2c lcd library available on my github account although i may ditch this as I will develop aroung Universal gcode sender.
  
  The axis control uses OCx output compare modules in dual single pulse mode as core independant pin, to free up 
  further resources once the timers are clocking to drive the pulses. 
  
  Communication is via serial and DMA is activated, this needs implimenting properly once all the interpolators have been taken care of.
  
  The code is in its early phase of development, and i invite anyone using MikroC Pro for Pic32 to contribute.
  
  
  
  
